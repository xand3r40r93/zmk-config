#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "behaviors.dtsi"

#define MACRO_SHIFT(NAME, KEY, ...) \
    ms_##NAME: ms_##NAME { \
    compatible = "zmk,behavior-macro"; \
    label = ZMK_MACRO_STRINGIFY(ms_##NAME); \
    #binding-cells = <0>; \
    bindings \
      = <&macro_release &kp LSHFT> \
      , <&macro_press KEY> \
      , <&macro_pause_for_release> \
      , <&macro_release KEY> \
      , <&macro_press &kp LSHFT> \
    ; \
    __VA_ARGS__ \
  };

#define L_DEF 0
#define L_NUM 1
#define L_SMBL1 2
#define L_SMBL2 3
#define L_NAV 4
#define L_FN  5
#define L_MOUSE 6
#define L_ADV 7

// KEY POSITION REFERENCE
// ------------------------------------------------------------------
// | 00 | 01 | 02 | 03 | 04 | 05 |    | 06 | 07 | 08 | 09 | 10 | 11 |
// | 12 | 13 | 14 | 15 | 16 | 17 |    | 18 | 19 | 20 | 21 | 22 | 23 |
// | 24 | 25 | 26 | 27 | 28 | 29 |    | 30 | 31 | 32 | 33 | 34 | 35 |
//                | 36 | 37 | 38 |    | 39 | 40 | 41 |

/ {

  behaviors {
    lt_b: layer_tap_balanced {
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_TAP_BALANCED";
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
      flavor = "balanced";
      tapping-term-ms = <500>;
    };
    mt_l: mod_tap_left {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_LEFT";
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      hold-trigger-key-positions = <6 7 8 9 10 11  18 19 20 21 22 23  30 31 32 33 34 35  39 40 41>;
    };
    mt_r: mod_tap_right {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_RIGHT";
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      hold-trigger-key-positions = <0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29  36 37 38>;
    };
    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
    };
    lt_tp: layer_tap_tap_preferred {
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_TAP_TAP_PREFERRED";
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
      flavor = "tap-preferred";
      tapping-term-ms = <500>;
    };
    ht_b: hold_tap_balanced {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_TAP_BALANCED";
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      flavor = "balanced";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
    };
    TAP_DANCE(td_lbrc_rbrc, &kp LBRC, &kp RBRC) // { }
    TAP_DANCE(td_lpar_rpar, &kp LPAR, &kp RPAR) // ( )
    TAP_DANCE(td_lt_gt, &kp LT, &kp GT) // < >
    TAP_DANCE(td_lbkt_rbkt, &kp LBKT, &kp RBKT) // [ ]
    TAP_DANCE(td_hyper_fslh_bslh, &mt_r LS(LC(LA(LCMD))) FSLH, &kp BSLH)
    TAP_DANCE(td_excl_qmark, &kp EXCL, &kp QMARK)
    TAP_DANCE(td_equal_minus, &kp EQUAL, &kp MINUS)
    ZMK_MACRO(zm_rbrc,
      bindings
      = <&macro_release &kp LSHFT>
      , <&macro_press &kp RBRC>
      , <&macro_pause_for_release>
      , <&macro_release &kp RBRC>
      , <&macro_press &kp LSHFT>
      ;
    )
    MOD_MORPH(mm_equal_under, &kp EQUAL, &kp UNDER,
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    MOD_MORPH(mm_lbrc_rbrc, &kp LBRC, &zm_rbrc,
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    )
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <

        &kp GRAVE
        &kp Q
        &kp W
        &kp E
        &lt L_SMBL2 R
        &lt L_NUM T

        &kp Y
        &lt L_FN U
        &kp I
        &kp O
        &kp P
        &td_lbkt_rbkt

        &kp TAB
        &mt_ui LSHFT A
        &mt_ui LCTRL S
        &mt_ui LALT D
        &lt L_NAV F
        &lt L_SMBL1 G

        &kp H
        &kp J
        &mt_ui RALT K
        &mt_ui RCTRL L
        &mt_ui RSHFT SEMI
        &kp SQT

        &kp CLCK
        &kp Z
        &kp X
        &kp C
        &kp V
        &kp B

        &kp N
        &kp M
        &kp COMMA
        &kp DOT
        &td_hyper_fslh_bslh
        &td_equal_minus

        &kp ESC
        &mt_ui LCMD TAB
        &kp SPACE

        &kp SPACE
        &mt_ui RCMD RET
        &kp BSPC

      >;
    };

    number_layer {
      bindings = <

        &none
        &kp LSHFT
        &kp LCTRL
        &kp LALT
        &none
        &none

        &kp LT
        &kp N7
        &kp N8
        &kp N9
        &kp MINUS
        &kp FSLH

        &kp TAB
        &none
        &kp COLON
        &kp COMMA
        &none
        &none

        &kp EQUAL
        &kp N4
        &kp N5
        &kp N6
        &kp PLUS
        &kp ASTRK

        &none
        &none
        &none
        &none
        &none
        &none

        &kp GT
        &kp N1
        &kp N2
        &kp N3
        &kp DOT
        &kp PRCNT

        &kp ESC
        &kp LCMD
        &kp SPACE

        &kp N0
        &kp RET
        &kp BSPC

      >;
    };

    sybmol1_layer {
      bindings = <

        &none
        &kp LSHFT
        &kp LCTRL
        &kp LALT
        &none
        &none

        &kp LT
        &kp QMARK
        &kp EXCL
        &kp SQT
        &kp LPAR
        &kp RPAR

        &kp TAB
        &none
        &none
        &none
        &none
        &none

        &kp EQUAL
        &kp MINUS
        &kp UNDER
        &kp COLON
        &kp LBRC
        &kp RBRC

        &none
        &none
        &none
        &none
        &none
        &none

        &kp GT
        &kp FSLH
        &kp COMMA
        &kp DOT
        &kp LBKT
        &kp RBKT

        &kp ESC
        &kp LCMD
        &kp SPACE

        &kp SPACE
        &kp RET
        &kp BSPC

      >;
    };

    sybmol2_layer {
      bindings = <

        &none
        &kp LSHFT
        &kp LCTRL
        &kp LALT
        &none
        &none

        &kp LT
        &kp TILDE
        &kp GRAVE
        &kp DQT
        &kp SEMI
        &none

        &kp TAB
        &none
        &none
        &none
        &none
        &none

        &kp EQUAL
        &kp AMPS
        &kp PIPE
        &kp CARET
        &kp DLLR
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &kp GT
        &kp BSLH
        &kp AT
        &kp HASH
        &none
        &none

        &kp ESC
        &kp LCMD
        &kp SPACE

        &kp SPACE
        &kp RET
        &kp BSPC

      >;
    };

    navigation_layer {
      bindings = <

        &kp GRAVE
        &kp LSHFT
        &kp LCTRL
        &kp LALT
        &none
        &none

        &kp HOME
        &kp PG_DN
        &kp PG_UP
        &kp END
        &none
        &none

        &kp TAB
        &none
        &none
        &none
        &none
        &none

        &kp LEFT
        &kp DOWN
        &kp UP
        &kp RIGHT
        &none
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &kp ESC
        &kp LCMD
        &kp SPACE

        &kp SPACE
        &kp RET
        &kp BSPC

      >;
    };

    fn_layer {
      bindings = <

        &kp GRAVE
        &kp F4
        &kp F3
        &kp F2
        &kp F1
        &none

        &none
        &none
        &kp RALT
        &kp RCTRL
        &kp RSHFT
        &none

        &kp TAB
        &kp F8
        &kp F7
        &kp F6
        &kp F5
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &kp F12
        &kp F11
        &kp F10
        &kp F9
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &kp ESC
        &none
        &kp SPACE

        &kp SPACE
        &mt_ui RCMD RET
        &kp BSPC

      >;
    };

    mouse_layer {
      bindings = <

        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &kp RS(RC(RA(RG(HOME))))
        &kp RS(RC(RA(RG(UP))))
        &kp RS(RC(RA(RG(END))))
        &none
        &none

        &none
        &kp LSHFT
        &kp LCTRL
        &kp RS(RC(RA(RG(LALT))))
        &none
        &none

        &none
        &kp RS(RC(RA(RG(LEFT))))
        &kp RS(RC(RA(RG(DOWN))))
        &kp RS(RC(RA(RG(RIGHT))))
        &none
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &trans
        &trans
        &trans

        &trans
        &trans
        &trans

      >;
    };

    advanced_layer {
      bindings = <

        &bt BT_SEL 3
        &bt BT_SEL 0
        &none
        &kp C_BRI_UP
        &kp C_VOL_UP
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &bt BT_SEL 4
        &bt BT_SEL 1
        &none
        &kp C_BRI_DN
        &kp C_VOL_DN
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &bt BT_CLR
        &bt BT_SEL 2
        &none
        &none
        &kp K_MUTE
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &none
        &none

        &none
        &none
        &none

      >;
    };

  };

};
