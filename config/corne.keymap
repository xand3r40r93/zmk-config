#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MACRO_SHIFT(NAME, KEY, ...) \
    ms_##NAME: ms_##NAME { \
    compatible = "zmk,behavior-macro"; \
    label = ms_##NAME; \
    #binding-cells = <0>; \
    bindings
      = <&macro_release &kp LSHFT>
      , <&macro_press KEY>
      , <&macro_pause_for_release>
      , <&macro_release KEY>
      , <&macro_press &kp LSHFT>
    ; \
    __VA_ARGS__ \
  };

#define MOD_MORPH_SHIFT(NAME, KEY, MOD_KEY) \
  mm_##NAME: mm_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    label = mm_##NAME; \
    #binding-cells = <0>; \
    bindings = <KEY>, <MOD_KEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
    keep-mods = <(MOD_LSFT|MOD_RSFT)>; \
  };

#define TAP_DANCE(NAME, KEY1, KEY2) \
  td_##NAME: td_##NAME { \
    compatible = "zmk,behavior-tap-dance"; \
      label = td_##NAME; \
      #binding-cells = <0>; \
      bindings = <KEY1>, <KEY2>; \
      tapping-term-ms = <200>; \
  };

#define L_DEF 0
#define L_NAV 1
#define L_FN  2
#define L_NUM 3
#define L_SMBL 4
#define L_MOUSE 5
#define L_ADV 6

// KEY POSITION REFERENCE
// ------------------------------------------------------------------
// | 00 | 01 | 02 | 03 | 04 | 05 |    | 06 | 07 | 08 | 09 | 10 | 11 |
// | 12 | 13 | 14 | 15 | 16 | 17 |    | 18 | 19 | 20 | 21 | 22 | 23 |
// | 24 | 25 | 26 | 27 | 28 | 29 |    | 30 | 31 | 32 | 33 | 34 | 35 |
//                | 36 | 37 | 38 |    | 39 | 40 | 41 |

/ {

  behaviors {
    lt_b: layer_tap_balanced {
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_TAP_BALANCED";
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
      flavor = "balanced";
      tapping-term-ms = <500>;
    };
    mt_l: mod_tap_left {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_LEFT";
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      hold-trigger-key-positions = <13 14 15  6 7 8 9 10 11  18 19 20 21 22 23  30 31 32 33 34 35  39 40 41>;
    };
    mt_r: mod_tap_right {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_RIGHT";
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      hold-trigger-key-positions = <20 21 22  0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29  36 37 38>;
    };
    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
    };
    lt_tp: layer_tap_tap_preferred {
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_TAP_TAP_PREFERRED";
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
      flavor = "tap-preferred";
      tapping-term-ms = <500>;
    };
    ht_b: hold_tap_balanced {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_TAP_BALANCED";
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      flavor = "balanced";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
    };
    TAP_DANCE(lbrc_rbrc, &kp LBRC, &kp RBRC) // { }
    TAP_DANCE(lpar_rpar, &kp LPAR, &kp RPAR) // ( )
    TAP_DANCE(lt_gt, &kp LT, &kp GT) // < >
    TAP_DANCE(lbkt_rbkt, &kp LBKT, &kp RBKT) // [ ]
    TAP_DANCE(hyper_fslh_bslh, &mt_r LS(LC(LA(LCMD))) FSLH, &kp BSLH)
    TAP_DANCE(excl_qmark, &kp EXCL, &kp QMARK)
    ZMK_MACRO(zm_rbrc,
      bindings
      = <&macro_release &kp LSHFT>
      , <&macro_press &kp RBRC>
      , <&macro_pause_for_release>
      , <&macro_release &kp RBRC>
      , <&macro_press &kp LSHFT>
      ;
    )
    MOD_MORPH_SHIFT(equal_under, &kp EQUAL, &kp UNDER)
    MOD_MORPH_SHIFT(lbrc_rbrc, &kp LBRC, &zm_rbrc)
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <

        &kp GRAVE                     // Tab       -> Esc |
        &mt_l RS(RC(RALT)) Q          // q         -> q   | Q
        &kp W                         // w         -> w   | W
        &kp E                         // e         -> e   | E
        &lt_b L_SMBL R                // r         -> r   | R
        &kp T                         // t         -> t   | T

        &kp Y                         // y         -> y   | Y
        &kp U                         // u         -> u   | U
        &kp I                         // i         -> i   | I
        &kp O                         // o         -> o   | O
        &mt_r LS(LC(LALT)) P          // p         -> p   | P
        &td_lbkt_rbkt                 // \         -> =   | _

        &kp TAB                       // Caps Lock
        &mt_l LSHFT A                 // a
        &mt_l LCTRL S                 // s
        &mt_l LALT D                  // d
        &lt_b L_NAV F                 // f
        &lt_b L_MOUSE G               // g

        &lt_b L_ADV H                 // h
        &lt_b L_FN J                  // j
        &mt_r RALT K                  // k
        &mt_r RCTRL L                 // l
        &mt_r RSHFT SEMI              // ;
        &kp SQT                       // '
        
        &kp CLCK                      // Left Shift
        &mt_l RS(RC(RA(RCMD))) Z      // z
        &kp X                         // x
        &kp C                         // c
        &lt_b L_NUM V                 // v
        &kp B                         // b

        &kp N                         // n
        &kp M                         // m
        &kp COMMA                     // ,
        &kp DOT                       // .
        &td_hyper_fslh_bslh                 // /
        &mm_equal_under               // Right Shift    -> RET 

        &kp ESC                       // Left Option
        &kp LCMD                      // Left Command
        &kp SPACE                     // Space

        &kp SPACE                     // Space
        &mt RCMD RET                  // Right Command
        &kp BSPC                      // Right Option

      >;
    };

    navigation_layer {
      bindings = <

        &kp GRAVE
        &kp RS(RC(RALT))
        &none
        &none
        &none
        &none

        &none
        &kp HOME
        &kp UP
        &kp END
        &kp PG_UP
        &none

        &kp TAB
        &kp LSHFT
        &kp LCTRL
        &kp LALT
        &none
        &none

        &none
        &kp LEFT
        &kp DOWN
        &kp RIGHT
        &kp PG_DN
        &none

        &none
        &kp RS(RC(RA(RCMD)))
        &none
        &none
        &none
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &kp ESC
        &kp LCMD
        &kp SPACE

        &kp SPACE
        &kp RET
        &kp BSPC

      >;
    };

    fn_layer {
      bindings = <

        &kp GRAVE
        &kp F1
        &kp F2
        &kp F3
        &kp F4
        &none

        &none
        &none
        &none
        &none
        &kp LS(LC(LALT))
        &none

        &kp TAB
        &kp F5
        &kp F6
        &kp F7
        &kp F8
        &none

        &none
        &none
        &kp RALT
        &kp RCTRL
        &kp RSHFT
        &none

        &none
        &kp F9
        &kp F10
        &kp F11
        &kp F12
        &none

        &none
        &none
        &none
        &none
        &kp LS(LC(LA(LCMD)))
        &none

        &kp ESC
        &none
        &kp SPACE

        &kp SPACE
        &mt RCMD RET
        &kp BSPC

      >;
    };

    number_layer {
      bindings = <
        
        &none
        &kp RS(RC(RALT))
        &none
        &none
        &none
        &none

        &kp PLUS
        &kp N7
        &kp N8
        &kp N9
        &kp ASTRK
        &none

        &kp TAB
        &kp LSHFT
        &kp LCTRL
        &kp LALT
        &none
        &none

        &kp MINUS
        &kp N4
        &kp N5
        &kp N6
        &kp FSLH
        &kp PRCNT

        &none
        &kp RS(RC(RA(RCMD)))
        &none
        &none
        &none
        &none

        &kp UNDER
        &kp N1
        &kp N2
        &kp N3
        &kp DOT
        &mm_equal_under

        &kp ESC
        &kp LCMD
        &none

        &kp N0
        &kp RET
        &kp BSPC

      >;
    };

    sybmol_layer {
      bindings = <
      
        &none
        &kp RS(RC(RALT))
        &none
        &none
        &none
        &none

        &kp PLUS
        &td_lbrc_rbrc
        &td_lpar_rpar
        &td_lt_gt
        &td_lbkt_rbkt
        &none

        &kp TAB
        &kp LSHFT
        &kp LCTRL
        &kp LALT
        &none
        &none

        &kp MINUS
        &kp AMPS
        &kp PIPE
        &kp CARET
        &kp TILDE
        &kp PRCNT

        &none
        &kp RS(RC(RA(RCMD)))
        &none
        &none
        &none
        &none

        &kp UNDER
        &kp AT
        &kp HASH
        &kp DLLR
        &td_excl_qmark
        &mm_equal_under

        &kp ESC
        &kp LCMD
        &kp SPACE

        &kp SPACE
        &kp RET
        &kp BSPC
      
      >;
    };

    mouse_layer {
      bindings = <
      
        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &kp RS(RC(RA(RG(HOME))))
        &kp RS(RC(RA(RG(UP))))
        &kp RS(RC(RA(RG(END))))
        &none
        &none

        &none
        &kp LSHFT
        &kp LCTRL
        &kp RS(RC(RA(RG(LALT))))
        &none
        &none

        &none
        &kp RS(RC(RA(RG(LEFT))))
        &kp RS(RC(RA(RG(DOWN))))
        &kp RS(RC(RA(RG(RIGHT))))
        &none
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &trans
        &trans
        &trans

        &trans
        &trans
        &trans
      
      >;
    };

    advanced_layer {
      bindings = <

        &bt BT_SEL 3
        &bt BT_SEL 0
        &none
        &kp C_BRI_UP
        &kp C_VOL_UP
        &none

        &none
        &none
        &none
        &none
        &none
        &none
        
        &bt BT_SEL 4
        &bt BT_SEL 1
        &none
        &kp C_BRI_DN
        &kp C_VOL_DN
        &none

        &none
        &none
        &none
        &none
        &none
        &none
        
        &bt BT_CLR
        &bt BT_SEL 2
        &none
        &none
        &kp K_MUTE
        &none

        &none
        &none
        &none
        &none
        &none
        &none

        &none
        &none
        &none
        
        &none
        &none
        &none

      >;
    };

  };

};
